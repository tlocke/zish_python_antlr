# Generated from Zish.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,396,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,93,8,6,11,
        6,12,6,94,1,6,3,6,98,8,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,106,8,7,10,
        7,12,7,109,9,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,3,9,128,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,3,12,152,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,160,8,
        13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,168,8,14,1,15,1,15,1,15,1,
        15,3,15,174,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,4,17,183,8,17,
        11,17,12,17,184,3,17,187,8,17,1,18,1,18,1,19,1,19,3,19,193,8,19,
        1,19,3,19,196,8,19,1,19,1,19,1,19,1,19,3,19,202,8,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,3,19,212,8,19,1,20,3,20,215,8,20,1,20,
        1,20,1,20,5,20,220,8,20,10,20,12,20,223,9,20,3,20,225,8,20,1,21,
        1,21,3,21,229,8,21,1,21,4,21,232,8,21,11,21,12,21,233,1,22,1,22,
        1,22,1,22,5,22,240,8,22,10,22,12,22,243,9,22,1,22,1,22,1,23,1,23,
        1,23,5,23,250,8,23,10,23,12,23,253,9,23,1,23,3,23,256,8,23,1,23,
        5,23,259,8,23,10,23,12,23,262,9,23,1,23,1,23,1,24,1,24,3,24,268,
        8,24,1,25,1,25,5,25,272,8,25,10,25,12,25,275,9,25,1,25,1,25,5,25,
        279,8,25,10,25,12,25,282,9,25,1,25,1,25,5,25,286,8,25,10,25,12,25,
        289,9,25,1,25,1,25,1,26,1,26,5,26,295,8,26,10,26,12,26,298,9,26,
        1,26,1,26,5,26,302,8,26,10,26,12,26,305,9,26,1,26,1,26,5,26,309,
        8,26,10,26,12,26,312,9,26,1,26,1,26,1,27,1,27,5,27,318,8,27,10,27,
        12,27,321,9,27,1,27,1,27,5,27,325,8,27,10,27,12,27,328,9,27,1,27,
        1,27,5,27,332,8,27,10,27,12,27,335,9,27,1,27,1,27,1,28,1,28,1,29,
        1,29,5,29,343,8,29,10,29,12,29,346,9,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,3,33,357,8,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,3,34,380,8,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,38,1,38,3,38,395,8,38,2,107,241,0,39,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,0,17,8,19,9,21,10,23,0,25,0,27,0,29,0,31,
        0,33,0,35,0,37,11,39,12,41,0,43,0,45,13,47,14,49,0,51,0,53,0,55,
        0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,1,0,17,
        2,0,84,84,116,116,1,0,49,57,1,0,48,50,1,0,49,50,1,0,48,49,2,0,90,
        90,122,122,1,0,48,51,1,0,48,53,2,0,69,69,101,101,2,0,34,34,92,92,
        4,0,43,43,47,57,65,90,97,122,1,0,48,57,2,0,43,43,45,45,9,0,34,34,
        47,47,92,92,97,98,102,102,110,110,114,114,116,116,118,118,3,0,48,
        57,65,70,97,102,3,0,9,13,32,32,160,160,2,0,133,133,8232,8233,414,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,79,1,0,0,0,3,81,
        1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,
        97,1,0,0,0,15,101,1,0,0,0,17,113,1,0,0,0,19,127,1,0,0,0,21,129,1,
        0,0,0,23,142,1,0,0,0,25,151,1,0,0,0,27,159,1,0,0,0,29,167,1,0,0,
        0,31,173,1,0,0,0,33,175,1,0,0,0,35,178,1,0,0,0,37,188,1,0,0,0,39,
        211,1,0,0,0,41,214,1,0,0,0,43,226,1,0,0,0,45,235,1,0,0,0,47,246,
        1,0,0,0,49,267,1,0,0,0,51,269,1,0,0,0,53,292,1,0,0,0,55,315,1,0,
        0,0,57,338,1,0,0,0,59,340,1,0,0,0,61,347,1,0,0,0,63,349,1,0,0,0,
        65,351,1,0,0,0,67,356,1,0,0,0,69,379,1,0,0,0,71,381,1,0,0,0,73,386,
        1,0,0,0,75,388,1,0,0,0,77,394,1,0,0,0,79,80,5,91,0,0,80,2,1,0,0,
        0,81,82,5,93,0,0,82,4,1,0,0,0,83,84,5,44,0,0,84,6,1,0,0,0,85,86,
        5,123,0,0,86,8,1,0,0,0,87,88,5,125,0,0,88,10,1,0,0,0,89,90,5,58,
        0,0,90,12,1,0,0,0,91,93,3,75,37,0,92,91,1,0,0,0,93,94,1,0,0,0,94,
        92,1,0,0,0,94,95,1,0,0,0,95,98,1,0,0,0,96,98,3,15,7,0,97,92,1,0,
        0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,100,6,6,0,0,100,14,1,0,0,0,101,
        102,5,47,0,0,102,103,5,42,0,0,103,107,1,0,0,0,104,106,9,0,0,0,105,
        104,1,0,0,0,106,109,1,0,0,0,107,108,1,0,0,0,107,105,1,0,0,0,108,
        110,1,0,0,0,109,107,1,0,0,0,110,111,5,42,0,0,111,112,5,47,0,0,112,
        16,1,0,0,0,113,114,5,110,0,0,114,115,5,117,0,0,115,116,5,108,0,0,
        116,117,5,108,0,0,117,18,1,0,0,0,118,119,5,116,0,0,119,120,5,114,
        0,0,120,121,5,117,0,0,121,128,5,101,0,0,122,123,5,102,0,0,123,124,
        5,97,0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,128,5,101,0,0,127,
        118,1,0,0,0,127,122,1,0,0,0,128,20,1,0,0,0,129,130,3,23,11,0,130,
        131,5,45,0,0,131,132,3,25,12,0,132,133,5,45,0,0,133,134,3,27,13,
        0,134,135,7,0,0,0,135,136,3,31,15,0,136,137,5,58,0,0,137,138,3,33,
        16,0,138,139,5,58,0,0,139,140,3,35,17,0,140,141,3,29,14,0,141,22,
        1,0,0,0,142,143,3,61,30,0,143,144,3,61,30,0,144,145,3,61,30,0,145,
        146,3,61,30,0,146,24,1,0,0,0,147,148,5,48,0,0,148,152,7,1,0,0,149,
        150,5,49,0,0,150,152,7,2,0,0,151,147,1,0,0,0,151,149,1,0,0,0,152,
        26,1,0,0,0,153,154,5,48,0,0,154,160,7,1,0,0,155,156,7,3,0,0,156,
        160,3,61,30,0,157,158,5,51,0,0,158,160,7,4,0,0,159,153,1,0,0,0,159,
        155,1,0,0,0,159,157,1,0,0,0,160,28,1,0,0,0,161,168,7,5,0,0,162,163,
        3,63,31,0,163,164,3,31,15,0,164,165,5,58,0,0,165,166,3,33,16,0,166,
        168,1,0,0,0,167,161,1,0,0,0,167,162,1,0,0,0,168,30,1,0,0,0,169,170,
        7,4,0,0,170,174,3,61,30,0,171,172,5,50,0,0,172,174,7,6,0,0,173,169,
        1,0,0,0,173,171,1,0,0,0,174,32,1,0,0,0,175,176,7,7,0,0,176,177,3,
        61,30,0,177,34,1,0,0,0,178,179,7,7,0,0,179,186,3,61,30,0,180,182,
        5,46,0,0,181,183,3,61,30,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,180,1,0,0,0,186,187,
        1,0,0,0,187,36,1,0,0,0,188,189,3,41,20,0,189,38,1,0,0,0,190,192,
        3,41,20,0,191,193,3,59,29,0,192,191,1,0,0,0,192,193,1,0,0,0,193,
        195,1,0,0,0,194,196,3,43,21,0,195,194,1,0,0,0,195,196,1,0,0,0,196,
        212,1,0,0,0,197,198,5,78,0,0,198,199,5,97,0,0,199,212,5,78,0,0,200,
        202,3,63,31,0,201,200,1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,
        204,5,73,0,0,204,205,5,110,0,0,205,206,5,102,0,0,206,207,5,105,0,
        0,207,208,5,110,0,0,208,209,5,105,0,0,209,210,5,116,0,0,210,212,
        5,121,0,0,211,190,1,0,0,0,211,197,1,0,0,0,211,201,1,0,0,0,212,40,
        1,0,0,0,213,215,5,45,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,224,
        1,0,0,0,216,225,5,48,0,0,217,221,7,1,0,0,218,220,3,61,30,0,219,218,
        1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,225,
        1,0,0,0,223,221,1,0,0,0,224,216,1,0,0,0,224,217,1,0,0,0,225,42,1,
        0,0,0,226,228,7,8,0,0,227,229,3,63,31,0,228,227,1,0,0,0,228,229,
        1,0,0,0,229,231,1,0,0,0,230,232,3,61,30,0,231,230,1,0,0,0,232,233,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,44,1,0,0,0,235,241,5,
        34,0,0,236,240,3,65,32,0,237,240,3,69,34,0,238,240,8,9,0,0,239,236,
        1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,242,
        1,0,0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,
        5,34,0,0,245,46,1,0,0,0,246,251,5,39,0,0,247,250,3,51,25,0,248,250,
        3,75,37,0,249,247,1,0,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,256,
        3,49,24,0,255,254,1,0,0,0,255,256,1,0,0,0,256,260,1,0,0,0,257,259,
        3,75,37,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,263,1,0,0,0,262,260,1,0,0,0,263,264,5,39,0,0,264,48,
        1,0,0,0,265,268,3,53,26,0,266,268,3,55,27,0,267,265,1,0,0,0,267,
        266,1,0,0,0,268,50,1,0,0,0,269,273,3,57,28,0,270,272,3,75,37,0,271,
        270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
        276,1,0,0,0,275,273,1,0,0,0,276,280,3,57,28,0,277,279,3,75,37,0,
        278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,
        281,283,1,0,0,0,282,280,1,0,0,0,283,287,3,57,28,0,284,286,3,75,37,
        0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,
        0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,3,57,28,0,291,52,1,0,0,
        0,292,296,3,57,28,0,293,295,3,75,37,0,294,293,1,0,0,0,295,298,1,
        0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,296,1,
        0,0,0,299,303,3,57,28,0,300,302,3,75,37,0,301,300,1,0,0,0,302,305,
        1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,303,
        1,0,0,0,306,310,3,57,28,0,307,309,3,75,37,0,308,307,1,0,0,0,309,
        312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,
        310,1,0,0,0,313,314,5,61,0,0,314,54,1,0,0,0,315,319,3,57,28,0,316,
        318,3,75,37,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,
        320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,326,3,57,28,0,323,
        325,3,75,37,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,
        327,1,0,0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,333,5,61,0,0,330,
        332,3,75,37,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,
        334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,5,61,0,0,337,
        56,1,0,0,0,338,339,7,10,0,0,339,58,1,0,0,0,340,344,5,46,0,0,341,
        343,3,61,30,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,
        345,1,0,0,0,345,60,1,0,0,0,346,344,1,0,0,0,347,348,7,11,0,0,348,
        62,1,0,0,0,349,350,7,12,0,0,350,64,1,0,0,0,351,352,5,92,0,0,352,
        353,3,67,33,0,353,66,1,0,0,0,354,357,7,13,0,0,355,357,3,77,38,0,
        356,354,1,0,0,0,356,355,1,0,0,0,357,68,1,0,0,0,358,359,5,92,0,0,
        359,360,5,117,0,0,360,361,1,0,0,0,361,380,3,71,35,0,362,363,5,92,
        0,0,363,364,5,85,0,0,364,365,5,48,0,0,365,366,5,48,0,0,366,367,5,
        48,0,0,367,368,1,0,0,0,368,369,3,71,35,0,369,370,3,73,36,0,370,380,
        1,0,0,0,371,372,5,92,0,0,372,373,5,85,0,0,373,374,5,48,0,0,374,375,
        5,48,0,0,375,376,5,49,0,0,376,377,5,48,0,0,377,378,1,0,0,0,378,380,
        3,71,35,0,379,358,1,0,0,0,379,362,1,0,0,0,379,371,1,0,0,0,380,70,
        1,0,0,0,381,382,3,73,36,0,382,383,3,73,36,0,383,384,3,73,36,0,384,
        385,3,73,36,0,385,72,1,0,0,0,386,387,7,14,0,0,387,74,1,0,0,0,388,
        389,7,15,0,0,389,76,1,0,0,0,390,395,2,10,13,0,391,392,5,13,0,0,392,
        395,5,10,0,0,393,395,7,16,0,0,394,390,1,0,0,0,394,391,1,0,0,0,394,
        393,1,0,0,0,395,78,1,0,0,0,40,0,94,97,107,127,151,159,167,173,184,
        186,192,195,201,211,214,221,224,228,233,239,241,249,251,255,260,
        267,273,280,287,296,303,310,319,326,333,344,356,379,394,1,6,0,0
    ]

class ZishLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LIST_START = 1
    LIST_FINISH = 2
    COMMA = 3
    MAP_START = 4
    MAP_FINISH = 5
    COLON = 6
    WS = 7
    NULL = 8
    BOOL = 9
    TIMESTAMP = 10
    INTEGER = 11
    DECIMAL = 12
    STRING = 13
    BLOB = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "','", "'{'", "'}'", "':'", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "LIST_START", "LIST_FINISH", "COMMA", "MAP_START", "MAP_FINISH", 
            "COLON", "WS", "NULL", "BOOL", "TIMESTAMP", "INTEGER", "DECIMAL", 
            "STRING", "BLOB" ]

    ruleNames = [ "LIST_START", "LIST_FINISH", "COMMA", "MAP_START", "MAP_FINISH", 
                  "COLON", "WS", "BLOCK_COMMENT", "NULL", "BOOL", "TIMESTAMP", 
                  "YEAR", "MONTH", "DAY", "OFFSET", "HOUR", "MINUTE", "SECOND", 
                  "INTEGER", "DECIMAL", "INT", "EXP", "STRING", "BLOB", 
                  "BASE_64_PAD", "BASE_64_QUARTET", "BASE_64_PAD1", "BASE_64_PAD2", 
                  "BASE_64_CHAR", "FRAC", "DIGIT", "PLUS_OR_MINUS", "COMMON_ESCAPE", 
                  "COMMON_ESCAPE_CODE", "UNICODE_ESCAPE", "HEX_DIGIT_QUARTET", 
                  "HEX_DIGIT", "SPACE", "EOL" ]

    grammarFileName = "Zish.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


